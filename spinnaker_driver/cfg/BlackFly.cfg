#!/usr/bin/env python

# Copyright (c) 2022, Autonomous Robots Lab, Norwegian University of Science and Technology
# All rights reserved.

# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree. 

PACKAGE = 'blackfly'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
gen.add("cam_id",            int_t,    0,
        "id of the camera to change the settings",
        0, 0, 10)
gen.add("acquisition_start",   bool_t,   0,
        "start frame acquisition",
        False)
gen.add("acquisition_stop",   bool_t,   0,
        "stop frame acquisition",
        False)
gen.add("fps",            double_t,    0,
        "change frame rate",
        20, 1, 50)
gen.add("enable_gamma",   bool_t,   0,
        "enable/disable gamma",
        True)
gen.add("gamma",   double_t,   0,
        "set gamma value",
        1.0, 0.25, 4.000)

exposure_auto_enum = gen.enum([gen.const("ExposureAuto_Off", int_t, 0, "ExposureAuto_Off"),
                              gen.const("ExposureAuto_Once", int_t, 1, "ExposureAuto_Once"),
                              gen.const("ExposureAuto_Continuous", int_t, 2, "ExposureAuto_Continuous")],
                             "An enum to set auto exposure mode")
gen.add("exposure_auto", int_t, 0,
        "change auto exposure type",
        2, 0, 2, edit_method=exposure_auto_enum)
gen.add("exposure_time",   int_t,   0,
        "change exposure time (Must first set ExposureAuto_Off)",
        20000, 12, 500000)

gain_auto_enum = gen.enum([gen.const("GainAuto_Off", int_t, 0, "GainAuto_Off"),
                              gen.const("GainAuto_Once", int_t, 1, "GainAuto_Once"),
                              gen.const("GainAuto_Continuous", int_t, 2, "GainAuto_Continuous")],
                             "An enum to set auto gain mode")
gen.add("gain_auto", int_t, 0,
        "change auto gain type",
        2, 0, 2, edit_method=gain_auto_enum)
gen.add("gain",   int_t,   0,
        "change gain (Must first set ExposureGain_Off)",
        1, 0, 46)

binning_mode_enum = gen.enum([gen.const("Average", int_t, 0, "Average"),
                              gen.const("Sum", int_t, 1, "Sum")],
                             "An enum to set binning mode")
gen.add("binning_mode", int_t, 0,
        "change binning type",
        0, 0, 1, edit_method=binning_mode_enum)
gen.add("binning",   int_t,   0, 
        "change binning",   
        2, 1, 4)

lighting_mode_enum = gen.enum([gen.const("Normal", int_t, 0, "Normal"),
                              gen.const("Backlight", int_t, 1, "Backlight"),
                              gen.const("Frontlight", int_t, 2, "Frontlight")],
                             "An enum to set lighting mode")
gen.add("lighting_mode", int_t, 0,
        "change lighting type",
        0, 0, 2, edit_method=lighting_mode_enum)

auto_exposure_priority_enum = gen.enum([gen.const("Gain", int_t, 0, "Gain"),
                              gen.const("ExposureTime", int_t, 1, "ExposureTime")],
                             "An enum to set auto exposure priority mode")
gen.add("auto_exposure_priority", int_t, 0,
        "change auto exposure priority type",
        0, 0, 1, edit_method=auto_exposure_priority_enum)


exit(gen.generate(PACKAGE, "blackfly", "BlackFly"))
